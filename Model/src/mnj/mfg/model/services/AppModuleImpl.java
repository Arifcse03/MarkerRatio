package mnj.mfg.model.services;

import java.math.BigDecimal;

import java.sql.CallableStatement;

import java.sql.SQLException;

import java.text.DecimalFormat;

import java.util.List;
import java.util.ArrayList;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import javax.faces.application.FacesMessage;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

import javax.servlet.http.HttpSession;

import javax.swing.text.Style;

import mnj.mfg.model.lov.views.InseamVOImpl;
import mnj.mfg.model.lov.views.InseamVOProgramticImpl;
import mnj.mfg.model.services.common.AppModule;

import mnj.mfg.model.views.MarkerLayPlanVOImpl;
import mnj.mfg.model.views.MnjMfgRatioplanPlycflineViewImpl;
import mnj.mfg.model.views.MnjMfgRatioplanPlylineViewImpl;
import mnj.mfg.model.views.MnjMfgRatioplanSizlineViewImpl;

import oracle.adf.share.ADFContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.VariableValueManager;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import oracle.jdbc.OracleTypes;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Mar 31 14:57:27 PKT 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppModuleImpl extends ApplicationModuleImpl implements AppModule {
    /**
     * This is the default constructor (do not remove).
     */

    public static final int VARCHAR2 = OracleTypes.VARCHAR;
    public static final int NUMBER = OracleTypes.NUMBER;
    public static final int DATE = OracleTypes.DATE;
    public static final int STRING = 1;
    public static final int INT = 2;
    public static final int DOUBLE = 3;

    public AppModuleImpl() {
    }

    /**
     * Container's getter for MnjMfgRatioplanView1.
     * @return MnjMfgRatioplanView1
     */
    public ViewObjectImpl getMnjMfgRatioplanView1() {
        return (ViewObjectImpl)findViewObject("MnjMfgRatioplanView1");
    }

    /**
     * Container's getter for MnjMfgRatioplanOblineView1.
     * @return MnjMfgRatioplanOblineView1
     */
    public ViewObjectImpl getMnjMfgRatioplanOblineView1() {
        return (ViewObjectImpl)findViewObject("MnjMfgRatioplanOblineView1");
    }

    /**
     * Container's getter for MnjMfgRatioplanPlylineView1.
     * @return MnjMfgRatioplanPlylineView1
     */
    public ViewObjectImpl getMnjMfgRatioplanPlylineView1() {
        return (ViewObjectImpl)findViewObject("MnjMfgRatioplanPlylineView1");
    }

    /**
     * Container's getter for MnjMfgRatioplanPlycflineView1.
     * @return MnjMfgRatioplanPlycflineView1
     */
    public ViewObjectImpl getMnjMfgRatioplanPlycflineView1() {
        return (ViewObjectImpl)findViewObject("MnjMfgRatioplanPlycflineView1");
    }

    /**
     * Container's getter for MnjMfgRatioplanSizlineView1.
     * @return MnjMfgRatioplanSizlineView1
     */
    public ViewObjectImpl getMnjMfgRatioplanSizlineView1() {
        return (ViewObjectImpl)findViewObject("MnjMfgRatioplanSizlineView1");
    }

    /**
     * Container's getter for SaleOrderVO1.
     * @return SaleOrderVO1
     */
    public ViewObjectImpl getSaleOrderVO1() {
        return (ViewObjectImpl)findViewObject("SaleOrderVO1");
    }

    /**
     * Container's getter for MnjMfgRpoblineFkLink1.
     * @return MnjMfgRpoblineFkLink1
     */
    public ViewLinkImpl getMnjMfgRpoblineFkLink1() {
        return (ViewLinkImpl)findViewLink("MnjMfgRpoblineFkLink1");
    }

    /**
     * Container's getter for MnjMfgRpplylineFkLink1.
     * @return MnjMfgRpplylineFkLink1
     */
    public ViewLinkImpl getMnjMfgRpplylineFkLink1() {
        return (ViewLinkImpl)findViewLink("MnjMfgRpplylineFkLink1");
    }

    /**
     * Container's getter for MnjMfgPlycflineFkLink1.
     * @return MnjMfgPlycflineFkLink1
     */
    public ViewLinkImpl getMnjMfgPlycflineFkLink1() {
        return (ViewLinkImpl)findViewLink("MnjMfgPlycflineFkLink1");
    }

    /**
     * Container's getter for MnjMfgRpsizlineFkLink1.
     * @return MnjMfgRpsizlineFkLink1
     */
    public ViewLinkImpl getMnjMfgRpsizlineFkLink1() {
        return (ViewLinkImpl)findViewLink("MnjMfgRpsizlineFkLink1");
    }

    public String callCreateRouting(int inventoryID, int rationPlanID) {
        try {
            String status="",status1="",status2="",status3="";
            status1= routing(inventoryID,rationPlanID,74);
            status2= routing(inventoryID,rationPlanID,72);
            status3= routing(inventoryID,rationPlanID,63);
            status = "<html><body><p>"+ status1 +"</p><p>"+status2+"</p><p>"+status3+"</p></body></html>";
            return status;
        } catch (Exception e) {
            
            e.printStackTrace();
        }
      
        return null;
    }

    public String routing(int inventoryID, int rationPlanID,int prefix){
        
        Map sessionScope = ADFContext.getCurrent().getSessionScope();
        String user = (String)sessionScope.get("userId");
        String orgId = (String)sessionScope.get("orgId");
        String respId = (String)sessionScope.get("respId");
        String respAppl = (String)sessionScope.get("respAppl");
        
        String status = null;
        String stmt =
            "BEGIN  MNJ_INTEGRATION_TO_ERP.MNJ_AUTO_CREATE_ROUTING_ALL(:1,:2 ,:3, :4, :5, :6, :7,:8); end;";
        java.sql.CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        //
        //        System.out.println("Ratio Plan id ---->" + rationPlanID);
        //        System.out.println("inv item id  ---->" + inventoryID);

        try {

            cs.setString(1, orgId); //org ID
            cs.setString(2, respId); //responsibility ID
            cs.setString(3, user); //user ID
            cs.setString(4, respAppl); //application ID
            cs.setInt(5, inventoryID); //item ID
            cs.registerOutParameter(6,
                                    oracle.jdbc.OracleTypes.VARCHAR); //status
            cs.setInt(7, rationPlanID); //ratio plan ID
            cs.setInt(8, prefix);
            cs.execute();
            status = cs.getString(6);
            cs.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return status;
    }

    public String callBOM(int inventoryID, int rationPlanID) {

        String status = "",status1="", status2="", status3="";
        
        status1 = callBOMAll(inventoryID,rationPlanID,74);
        status2 = callBOMAll(inventoryID,rationPlanID,72);
        status3 = callBOMAll(inventoryID,rationPlanID,63);
        
        status = "<html><body><p>"+ status1 +"</p><p>"+status2+"</p><p>"+status3+"</p></body></html>";
        
        return status;
    }
    public String callBOMAll(int inventoryID, int rationPlanID,int prefix) {
        Map sessionScope = ADFContext.getCurrent().getSessionScope();
        String user = (String)sessionScope.get("userId");
        String orgId = (String)sessionScope.get("orgId");
        String respId = (String)sessionScope.get("respId");
        String respAppl = (String)sessionScope.get("respAppl");


        String status = null;
        String stmt =
            "BEGIN  MNJ_INTEGRATION_TO_ERP.MNJ_CALL_PROCESS_MULTI_BOM(:1,:2 ,:3, :4, :5, :6, :7, :8); end;";
        java.sql.CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);

        try {

            cs.setString(1, orgId); //org ID
            cs.setString(2, respId); //responsibility ID
            cs.setString(3, user); //user ID
            cs.setString(4, respAppl); //application ID
            cs.setInt(5, inventoryID); //item ID
            cs.registerOutParameter(6,
                                    oracle.jdbc.OracleTypes.VARCHAR); //status
            cs.setInt(7, rationPlanID); //ratio plan ID
            cs.setInt(8, prefix); //prefix

            cs.execute();
            status = cs.getString(6);
            cs.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
        return status;
    }

    public String callItem(int inventoryID, int rationPlanID) {

        Map sessionScope = ADFContext.getCurrent().getSessionScope();
        String user = (String)sessionScope.get("userId");
        String orgId = (String)sessionScope.get("orgId");
        String respId = (String)sessionScope.get("respId");
        String respAppl = (String)sessionScope.get("respAppl");


        String status = null;
        String stmt =
            "BEGIN  MNJ_INTEGRATION_TO_ERP.MNJ_CALL_ITEM_CREATION(:1,:2 ,:3, :4, :5, :6, :7); end;";
        java.sql.CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);

        try {

            cs.setString(1, orgId); //org ID
            cs.setString(2, respId); //responsibility ID
            cs.setString(3, user); //user ID
            cs.setString(4, respAppl); //application ID
            cs.setInt(5, inventoryID); //item ID

            //            cs.setInt(1, 0); //org ID
            //            cs.setInt(2, 0); //responsibility ID
            //            cs.setInt(3, 0); //user ID
            //            cs.setInt(4, 0); //application ID
            //            cs.setInt(5, 0); //item ID

            cs.registerOutParameter(6,
                                    oracle.jdbc.OracleTypes.VARCHAR); //status
            cs.setInt(7, rationPlanID); //ratio plan ID

            cs.execute();
            status = cs.getString(6);
            cs.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
        return status;
    }

    public void setValues() {


    }

    public void setPopulateSizeWhereClause(String inseam) {


        getDBTransaction().commit();

        String orderId = null, stn = null, ratioId = null;
          String sizeInseam = changeToString(getMarkerBlockValues("InseamPattern"));

        ratioId = changeToString(getHeaderFieldValue(STRING, "RatioplanId"));
        
        //Map sessionScope = ADFContext.getCurrent().getSessionScope();
        //String color = (String)sessionScope.get("color");
        //        System.out.println(ratioId+"sizeInseam ----from block"+inseam);

        ViewObject popvo = getPoplateSizeVo1();
        

        System.out.println("ratioId is..."+ratioId);
        System.out.println("inseam is..."+inseam);
        
        popvo.setWhereClause(null);
        popvo.setWhereClauseParam(0, ratioId);
        popvo.setWhereClauseParam(1, inseam);

//        popvo.setWhereClause("RATIOPLAN_ID = " + ratioId + " AND INSEAM = '" +
//                             inseam + "'");
        popvo.executeQuery();
        
        System.out.println("Query is... "+popvo.getQuery());
        
        

        //        shipVo.setWhereClause("HEADER_ID = " + orderId + " AND OB_REF = '" +
        //                              stn + "'");
        //        shipVo.executeQuery();

    }

    public void setMarkerBlockValues(String name, String value) {

        ViewObject vo = getMnjMfgRatioplanPlylineView1();
        vo.getCurrentRow().setAttribute(name, value);

    }

    public Object getMarkerBlockValues(String name) {

        ViewObject vo = getMnjMfgRatioplanPlylineView1();
        Object val = vo.getCurrentRow().getAttribute(name);

        return val;


    }

    public void PopulateSize() {


        ViewObject popvo = getPoplateSizeVo1();
        // popvo.executeQuery();
        double totalInseam = 0.0, sizeQty = 0.0;

        RowSetIterator it = popvo.createRowSetIterator("aa");
        while (it.hasNext()) {
            Row r = it.next();

            //totalInseam = totalInseam + ChangetoDouble(changeToString(r.getAttribute("SizeQty")));

            try {

                if (r.getAttribute("MultiSelect") != null &&
                    r.getAttribute("MultiSelect").equals("Y")) {
                    //sizeQty = sizeQty + ChangetoDouble(changeToString(r.getAttribute("SizeQty")));
                    populateLines(r);
                }
            } catch (Exception e) {
                ;
            }
            //populateLines(r);

        }

        it.closeRowSetIterator();

        //        setMarkerBlockValues("BlncInseamQty", String.valueOf(sizeQty));
        //        setMarkerBlockValues("TotalInseamQty", String.valueOf(totalInseam));
        //        getMnjMfgRatioplanPlylineView1().executeQuery();


    }


    public void populateLines(Row poprow) {

        Row linerow = createLines();
        ViewObject hvo = getMnjMfgRatioplanView1();
        int Result = 0;
        double ExtraCutPercent = 0.0, planQtyVal = 0.0;
        ;
        try {
            ExtraCutPercent =
                    Double.parseDouble(hvo.getCurrentRow().getAttribute("ExtraCutPercent").toString());
            planQtyVal =
                    Double.parseDouble(getPopulateValue(poprow, "SizeQty")) *
                    (1 + (ExtraCutPercent / 100));

            DecimalFormat df = new DecimalFormat("####0");
            Result = Integer.parseInt(df.format(planQtyVal));

        } catch (Exception e) {
            ;
        }
        System.out.println("ExtraCutPercent  ------ > " + ExtraCutPercent);
        System.out.println("planQtyVal  ------ > " + planQtyVal);


        linerow.setAttribute("SizeQty",
                             getPopulateValue(poprow, "SizeQty")); //DcpoNo
        linerow.setAttribute("SizeId",
                             getPopulateValue(poprow, "Size1")); //SizeVal
        // linerow.setAttribute("PlanQty", planQtyVal); //
        linerow.setAttribute("PlanQty", Result); //
        linerow.setAttribute("BalQty", getSizeBlncValue());


    } //end of populateLines


    public double getSizeBlncValue() {

        String ratioId =
            getMnjMfgRatioplanView1().getCurrentRow().getAttribute("RatioplanId").toString();

        double sizeQtyVal = getNumericValue(getSizeFromView("VAL"));
        double total =
            getPreSizeBlnc(ratioId, String.valueOf(getSizeFromView("NAME")),
                           String.valueOf(getSizeFromView("ID")));

        double balance = sizeQtyVal - total;


        return balance;
    }

    public double getNumericValue(Object val) {

        if (val != null) {
            return Double.parseDouble(String.valueOf(val));
        } else
            return 0;

    }

    public Object getSizeFromView(String type) {


        Object size = null, sizeQty = null, sizePk = null;
        try {
            size =
getMnjMfgRatioplanSizlineView1().getCurrentRow().getAttribute("SizeId");
        } catch (Exception e) {
            ;
        }

        try {
            sizeQty =
                    getMnjMfgRatioplanSizlineView1().getCurrentRow().getAttribute("PlanQty");
        } catch (Exception e) {
            ;
        }

        try {
            sizePk =
                    getMnjMfgRatioplanSizlineView1().getCurrentRow().getAttribute("SizlineId");
        } catch (Exception e) {
            ;
        }

        if (type.equalsIgnoreCase("NAME")) {
            return size;
        } else if (type.equalsIgnoreCase("ID")) {
            return sizePk;
        } else
            return sizeQty;

    }

    public Row createLines() {

        ViewObject vo = getMnjMfgRatioplanSizlineView1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        return row;
    } //end of createHeader

    public String getPopulateValue(Row r, String columnName) {

        String value = null;
        try {
            value = r.getAttribute(columnName).toString();
        } catch (Exception e) {
            ;
        }
        return value;
    }


    /**
     * Container's getter for PoplateSizeVo1.
     * @return PoplateSizeVo1
     */
    public ViewObjectImpl getPoplateSizeVo1() {
        return (ViewObjectImpl)findViewObject("PoplateSizeVo1");
    }

    public String createJob(int rationPlanID) {

        Map sessionScope = ADFContext.getCurrent().getSessionScope();
        String user = (String)sessionScope.get("userId");
        String orgId = (String)sessionScope.get("orgId");
        String respId = (String)sessionScope.get("respId");
        String respAppl = (String)sessionScope.get("respAppl");

        String status = "", status1="", status2="", status3="";
        status1 =(String)callStoredFunction(VARCHAR2, "MNJ_INTEGRATION_TO_ERP.XX_WIP_CREATE_JOB_F(?, ?, ?, ?, ?, ?)",
                                           new Object[] { rationPlanID, orgId,
                                                          respId, user,
                                                          respAppl,74 });
        status2 =(String)callStoredFunction(VARCHAR2, "MNJ_INTEGRATION_TO_ERP.XX_WIP_CREATE_JOB_F(?, ?, ?, ?, ?, ?)",
                                           new Object[] { rationPlanID, orgId,
                                                          respId, user,
                                                          respAppl,72 });
        status3 =(String)callStoredFunction(VARCHAR2, "MNJ_INTEGRATION_TO_ERP.XX_WIP_CREATE_JOB_F(?, ?, ?, ?, ?, ?)",
                                           new Object[] { rationPlanID, orgId,
                                                          respId, user,
                                                          respAppl,63 });
        
        status ="<html><body><p>"+ status1 +"</p><p>"+status2+"</p><p>"+status3+"</p></body></html>";
        //        String stmt =
        //            "BEGIN :1 := MNJ_INTEGRATION_TO_ERP.CREATE_JOB(:2, :3, :4, :5, :6); end;";
        //        java.sql.CallableStatement cs =
        //            getDBTransaction().createCallableStatement(stmt, 1);
        //
        //        try {
        //            cs.setInt(2, rationPlanID);
        //            cs.setString(3, orgId); //org ID
        //            cs.setString(4, respId); //responsibility ID
        //            cs.setString(5, user); //user ID
        //            cs.setString(6, respAppl); //application ID
        //
        //            cs.registerOutParameter(1,
        //                                    oracle.jdbc.OracleTypes.VARCHAR); //status
        //
        //            cs.execute();
        //            status = cs.getString(1);
        //            cs.close();
        //
        //        } catch (Exception e) {
        //            status = e.getMessage();
        //        }
        return status;
    }


    public void setSTNWhereClause(String saleOrderId) {
        
       // String BuyerId = getBuyerId();
        String SystemId = getSystemId();
       // String Style = getStyleName();
      //  String Season = getSeason();
       // String Color = getColor();
       // String Wash = getwash();
        

       // Map sessionScope = ADFContext.getCurrent().getSessionScope();
       // String org = (String)sessionScope.get("orgId");
        

        ViewObject populatevo = getSTNVO1();
        populatevo.setWhereClause("SYSTEM_ID   = '" + SystemId + "'");
        System.out.println(populatevo.getQuery());
        populatevo.executeQuery();
    }
    public String getSystemId() {

        ViewObject vo = getMnjMfgRatioplanView1();

        String SystemId = vo.getCurrentRow().getAttribute("SystemId").toString();

        return SystemId;

    }

    public String getBuyerId() {

        ViewObject vo = getMnjMfgRatioplanView1();

        String BuyerId = vo.getCurrentRow().getAttribute("BuyerId").toString();

        return BuyerId;

    }

    public String getStyleName() {

        ViewObject vo = getMnjMfgRatioplanView1();

        String Style = vo.getCurrentRow().getAttribute("Style").toString();

        return Style;

    }

    public String getSeason() {

        ViewObject vo = getMnjMfgRatioplanView1();

        String Season = vo.getCurrentRow().getAttribute("Season").toString();

        return Season;

    }

    public String populateSTNs(String saleOrderId) {


        ViewObject populatevo = getSTNVO1();
        //        System.out.println("Sale orde rId --->" + saleOrderId);
        StringBuilder stnNos = new StringBuilder();
        if (populatevo.getRowCount() == 0)
            ;
        RowSetIterator it = populatevo.createRowSetIterator("aa");
        List<String> ls = new ArrayList<String>();
        Set<String> hashSet = new HashSet<String>();
        int count = 0;
        String invId = null, itemCode = null, itemDesc = null;
        String stn = null, headerid = null, lineId = null;
        Row r = null;
        String qtyString = null;
        double qty = 0.00, qty1;
        setSTNFlag();
        while (it.hasNext()) {
            r = it.next();
            String flag = getPopulateValue(r, "MultiSelect");
            //            System.out.println("Falg value ----->" + flag);

            if (flag != null && flag.equals("true")) {
                count++;
                invId = getPopulateValue(r, "InventoryItemId");
                stn = getPopulateValue(r, "StnNumber");
                headerid = getPopulateValue(r, "HeaderId");
                lineId = getPopulateValue(r, "LineId");
                qtyString = getPopulateValue(r, "OrderQty");
                qty1 = Double.parseDouble(qtyString);
                qty = qty + qty1;
                if (count > 1) {
                    stnNos.append(";" + stn);
                } else
                    stnNos.append(stn);
                //                ls.add(invId);
                hashSet.add(invId);
                createSTNVOInfo(headerid, lineId, qty1);
            }
        }
        it.closeRowSetIterator();
        //        System.out.println("Count value-->" + count);
        //        System.out.println("Hash Value-->" + hashSet.size());
        setInseamWhereClause();
        if (r != null) {
            //            qty = getPopulateValue(r, "OrderQty");
            itemCode = getPopulateValue(r, "OrderedItem");
            itemDesc = getPopulateValue(r, "ItemDesc");
        }

        if (count == 1) {
            //            System.out.println("you can proceed..");
            setNewValues(stnNos, qty, itemCode, itemDesc, invId);
        } else if (count == 0) {
            ;
        } else if (count == hashSet.size()) {
            //   getDBTransaction().rollback();
            //            System.out.println("you can not proceed..");
            FacesMessage fm =
                new FacesMessage("You can not proceed with different finished good Items");
            fm.setSeverity(FacesMessage.SEVERITY_INFO);
            FacesContext context = FacesContext.getCurrentInstance();
            context.addMessage(null, fm);
        } else {
            //            System.out.println("Else Called-->");
            setNewValues(stnNos, qty, itemCode, itemDesc, invId);
        }


        return "Message";
    }

    public void setNewValues(StringBuilder stnNos, double totalQty,
                             String itemCode, String itemDesc, String invId) {

        ViewObject vo = getMnjMfgRatioplanView1();
        Row r = vo.getCurrentRow();
        r.setAttribute("Obsno", stnNos);
        r.setAttribute("ItemCode", itemCode);
        r.setAttribute("ItemDescription", itemDesc);
        r.setAttribute("TotalQty", totalQty);
        r.setAttribute("InventoryItemId", invId);

    }

    /**
     * Container's getter for STNVO1.
     * @return STNVO1
     */
    public ViewObjectImpl getSTNVO1() {
        return (ViewObjectImpl)findViewObject("STNVO1");
    }

    public void createSTNVOInfo(String saleOrderId, String lineId,
                                double qty) {

        Row stnRow = getSTNLine();
        stnRow.setAttribute("SalesorderId", saleOrderId);
        stnRow.setAttribute("SolineId", lineId);
        stnRow.setAttribute("Quantity", qty);
        stnRow.setAttribute("FlagEnabled", "Y");
    }

    public Row getSTNLine() {

        ViewObject vo = getMnjMfgRatioplanOblineView1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        return row;
    } //end of createHeader

    public void setSTNFlag() {

        ViewObject vo = getMnjMfgRatioplanOblineView1();
        RowSetIterator it = vo.createRowSetIterator("itStn");
        while (it.hasNext()) {
            it.next().setAttribute("FlagEnabled", "N");
        }

        it.closeRowSetIterator();
    }

    public void setInseamWhereClause() {

        InseamVOImpl vo = (InseamVOImpl)getInseamVO1();
        //        FacesContext fctx = FacesContext.getCurrentInstance();
        //        ExternalContext ectx = fctx.getExternalContext();
        //        HttpSession userSession = (HttpSession)ectx.getSession(false);
        //        userSession.setAttribute("p_lineIds", "'5027','5029'");
        //       vo.clearCache();
        //       vo.setFullSqlMode(vo.FULLSQL_MODE_AUGMENTATION);
        //        vo.setQuery("select l.inseam, d.size_value, sum(d.size_qty) qty\n" +
        //        "                          from cust_mnj_ont_so_obin_sizline l,\n" +
        //        "                         cust_mnj_ont_so_obinsline    d\n" +
        //        "                         where l.SO_OBINSLINE_ID = d.SO_OBINSLINE_ID\n" +
        //        "                           and l.soline_id in ('5027', '5029')\n" +
        //        "                         group by l.inseam, d.size_value");
        //        vo.executeQuery();

        ViewObject runtimeVo =
            getDBTransaction().createViewObjectFromQueryStmt("select l.inseam, d.size_value, sum(d.size_qty) qty\n" +
                "                          from cust_mnj_ont_so_obin_sizline l,\n" +
                "                         cust_mnj_ont_so_obinsline    d\n" +
                "                         where l.SO_OBINSLINE_ID = d.SO_OBINSLINE_ID\n" +
                "                           and l.soline_id in ('5027', '5029')\n" +
                "                         group by l.inseam, d.size_value");
        //        System.out.println(runtimeVo.getQuery());
        RowSetIterator it = runtimeVo.createRowSetIterator("runVo");
        //       while(runtimeVo.hasNext()){
        Row r = createInseamLines();
        r.setAttribute("Inseam", "0");
        r.setAttribute("Size", "23");
        r.setAttribute("SizeQty", "232");
        //        System.out.println("Row -->" + r);
        //  getInseamVOProgramtic1().executeQuery();

        //        }
    }

    public Row createInseamLines() {

        ViewObject vo = getInseamVOProgramtic1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        row.setAttribute("RowKey", 1);
        return row;
    } //end of createHeader

    /**
     * Container's getter for InseamVO1.
     * @return InseamVO1
     */
    public ViewObjectImpl getInseamVO1() {
        return (ViewObjectImpl)findViewObject("InseamVO1");
    }

    /**
     * Container's getter for InseamVOProgramtic1.
     * @return InseamVOProgramtic1
     */
    public InseamVOProgramticImpl getInseamVOProgramtic1() {
        return (InseamVOProgramticImpl)findViewObject("InseamVOProgramtic1");
    }

    /**
     * Container's getter for ShipmentDCPO1.
     * @return ShipmentDCPO1
     */
    public ViewObjectImpl getShipmentDCPO1() {
        return (ViewObjectImpl)findViewObject("ShipmentDCPO1");
    }

    public double getPreSizeBlnc(String rationPlanID, String sizeVal,
                                 String sizeId) {

        double value = 0;

        getDBTransaction().commit();


        BigDecimal a =
            (BigDecimal)callStoredFunction(NUMBER, "mnj_mfg_marker_ratio_pkg.get_pre_siz_bal(?, ?, ?)",
                                           new Object[] { rationPlanID,
                                                          sizeVal, sizeId });


        // BigDecimal a =
        //      (BigDecimal)callStoredFunction(NUMBER, "mnj_mfg_marker_ratio_pkg.new_refresh_blnc(?)",
        //                                     new Object[] { rationPlanID});

        value = a.doubleValue();

        //        String stmt =
        //            "BEGIN :1 := mnj_mfg_marker_ratio_pkg.get_pre_siz_bal(:2, :3, :4); end;";
        //        java.sql.CallableStatement cs =
        //            getDBTransaction().createCallableStatement(stmt, 1);
        //        System.out.println(sizeVal + "Parameters in AM ------>" +
        //                           rationPlanID);
        //
        //        try {
        //            cs.registerOutParameter(1, OracleTypes.NUMBER); //status
        //            cs.setString(2, rationPlanID);
        //            cs.setString(3, sizeVal);
        //            cs.setString(4, sizeId);
        //            cs.execute();
        //            value = cs.getDouble(1);
        //            cs.close();
        //
        //        } catch (Exception e) {
        //            e.printStackTrace();
        //        }

        return value;
    }


    public void refreshSizeBlnc(String rationPlanID, String sizeVal,
                                String sizeId) {

        double value = 0;

        getDBTransaction().commit();
        //
        //        System.out.println("Ratio id --->" + rationPlanID + " size VAlue -->" +
        //                           sizeVal + "Size Id ---->" + sizeId);
        String stmt =
            "BEGIN  mnj_mfg_marker_ratio_pkg.new_refresh_blnc(:1); end;";
        java.sql.CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        //        System.out.println(sizeVal + "Parameters in AM ------>" +
        //                           rationPlanID);
        try {
            //  cs.registerOutParameter(1,OracleTypes.NUMBER); //status
            cs.setString(1, rationPlanID);
            cs.execute();
            cs.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    public void makeBundles() {


        ViewObject vo = getMnjMfgRatioplanPlycflineView1();
        String plyId = null;

        try {
            plyId = vo.getCurrentRow().getAttribute("PlycflineId").toString();
        } catch (Exception e) {
            ;
        }
        //        System.out.println("Ply id ---->" + plyId);
        String stmt = "BEGIN  mnj_mfg_marker_ratio_pkg.make_bundles(:1); end;";
        java.sql.CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);

        try {
            //  cs.registerOutParameter(1,OracleTypes.NUMBER); //status
            cs.setString(1, plyId);
            cs.execute();
            cs.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
        vo.executeQuery();


    }


    public void createCutNos() {

        ViewObject hvo = getMnjMfgRatioplanView1();

        String style = hvo.getCurrentRow().getAttribute("NewStyle").toString();
        String ratioNo =
            hvo.getCurrentRow().getAttribute("RatioplanNumber").toString();


        ViewObject vo = getMnjMfgRatioplanPlylineView1();
        RowSetIterator it = vo.createRowSetIterator("rr");
        int cutno = 1;
        while (it.hasNext()) {

            Object val = it.next().getAttribute("CutSrNo");
            if (val != null) {
                cutno = Integer.parseInt(val.toString());
                cutno = cutno + 1;
            }
        }
        it.closeRowSetIterator();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        row.setAttribute("CutNo", ratioNo + "/" + cutno);
        row.setAttribute("CutSrNo", cutno);


    }


    public void createCutNosNew() {

        ViewObject hvo = getMnjMfgRatioplanPlylineView1();
        String markerNo = hvo.getCurrentRow().getAttribute("CutNo").toString();

        //        ViewObject vo = getMnjMfgRatioplanPlycflineView1();
        //        RowSetIterator it = vo.createRowSetIterator("rr");
        //        int cutno = 1;
        //        while (it.hasNext()) {
        //
        //            Object val = it.next().getAttribute("SrCutNo");
        //            if (val != null) {
        //                cutno = Integer.parseInt(val.toString());
        //                cutno = cutno + 1;
        //            }
        //
        //        }
        //        it.closeRowSetIterator();

        //        ViewObject PlyCfLine = getMnjMfgRatioplanPlycflineView1();
        //        String plyId = null;
        //       try
        //        {
        //            plyId = PlyCfLine.getCurrentRow().getAttribute("PlycflineId").toString();
        //        }
        //        catch (Exception e)
        //        {
        //            ;
        //        }

        String plyId = PlylineId();
        int plyIdNew = Integer.parseInt(plyId);
        System.out.println("plyId ....... " + plyIdNew);
        int CutNumber = 2;
        // String CutNumberNew;

        BigDecimal CutNumber1 =
            (BigDecimal)callStoredFunction(NUMBER, "mnj_mfg_marker_ratio_pkg.GETCUTNUMBER(?)",
                                           new Object[] { plyIdNew });
        CutNumber = CutNumber1.intValue();

        System.out.println("CutNumber ....... " + CutNumber);
        //     System.out.println("CutNumberNew ....... "+CutNumberNew);

        //      String stmt  = "BEGIN  :2 := mnj_mfg_marker_ratio_pkg.GETCUTNUMBER(:1,:3); end;";
        //      java.sql.CallableStatement cs =
        //          getDBTransaction().createCallableStatement(stmt, 1);

        //        try {
        //            cs.registerOutParameter(2,OracleTypes.NUMBER); //status
        //            cs.registerOutParameter(3,OracleTypes.VARCHAR); //status
        //          //  cs.setString(1, plyId);
        //            cs.setInt(1, plyIdNew);
        //            cs.execute();
        //
        //            CutNumber = cs.getInt(2);
        ////            CutNumberNew = cs.getString(3);
        //
        //
        //            cs.close();
        //
        //        } catch (Exception e) {
        //            e.printStackTrace();
        //        }


        ViewObject vo = getMnjMfgRatioplanPlycflineView1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        // row.setAttribute("CutNo", markerNo + "/" + cutno);
        // row.setAttribute("SrCutNo", cutno);
        row.setAttribute("CutNo", markerNo + "/" + CutNumber);
        row.setAttribute("SrCutNo", CutNumber);
        getDBTransaction().commit();


    }


    /**
     * Container's getter for RollNo1.
     * @return RollNo1
     */
    public ViewObjectImpl getRollNo1() {
        return (ViewObjectImpl)findViewObject("RollNo1");
    }


    /**
     * Container's getter for MnjMfgRatioplanBposAllView1.
     * @return MnjMfgRatioplanBposAllView1
     */
    public ViewObjectImpl getMnjMfgRatioplanBposAllView1() {
        return (ViewObjectImpl)findViewObject("MnjMfgRatioplanBposAllView1");
    }

    /**
     * Container's getter for RatioBPOsVL1.
     * @return RatioBPOsVL1
     */
    public ViewLinkImpl getRatioBPOsVL1() {
        return (ViewLinkImpl)findViewLink("RatioBPOsVL1");
    }


    /**
     * Container's getter for MarkerLayPlanVO1.
     * @return MarkerLayPlanVO1
     */
    public MarkerLayPlanVOImpl getMarkerLayPlanVO1() {
        return (MarkerLayPlanVOImpl)findViewObject("MarkerLayPlanVO1");
    }

    /**
     * Container's getter for MarkerLayPlanVL1.
     * @return MarkerLayPlanVL1
     */
    public ViewLinkImpl getMarkerLayPlanVL1() {
        return (ViewLinkImpl)findViewLink("MarkerLayPlanVL1");
    }


    public void setSessionValues(String orgId, String userId, String respId,
                                 String respAppl) {


        if (userId != null) {
            //String flag = getFlagValue(userId, respId);
            FacesContext fctx = FacesContext.getCurrentInstance();
            ExternalContext ectx = fctx.getExternalContext();
            HttpSession userSession = (HttpSession)ectx.getSession(false);
            //userSession.setAttribute("Flag", flag);
            userSession.setAttribute("userId", userId);
            userSession.setAttribute("orgId", orgId);
            userSession.setAttribute("respId", respId);
            userSession.setAttribute("respAppl", respAppl);
            userSession.setAttribute("unitName", getUnitName(orgId));
        }
    }


    public String getUnitName(String orgId) {

        ViewObject vo = getoperatingUnitsVo1();
        vo.setWhereClause("ORGANIZATION_ID = " + orgId);
        vo.executeQuery();
        String name = null;
        vo.first();

        try {
            name = vo.getCurrentRow().getAttribute("Name").toString();
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        return name;

    }


    /**
     * Container's getter for operatingUnitsVo1.
     * @return operatingUnitsVo1
     */
    public ViewObjectImpl getoperatingUnitsVo1() {
        return (ViewObjectImpl)findViewObject("operatingUnitsVo1");
    }

    /**
     * Container's getter for BPOVO1.
     * @return BPOVO1
     */
    public ViewObjectImpl getBPOVO1() {
        return (ViewObjectImpl)findViewObject("BPOVO1");
    }

    /***************************************************************
     * Populate BPO
     * ******************************************************************/

    public void popBPO() {


        ViewObject popvo = getBPOVO1();
        // popvo.executeQuery();
        //        System.out.println("Populate bpo called --->");

        RowSetIterator it = popvo.createRowSetIterator("aa");
        while (it.hasNext()) {
            Row r = it.next();
            try {
                //                System.out.println("BPO flag -->" + r.getAttribute("BPOFlag"));

                if (r.getAttribute("BPOFlag") != null &&
                    r.getAttribute("BPOFlag").equals("Y"))
                    insertBPO(r);
            } catch (Exception e) {
                ;
            }
            //populateLines(r);

        }

        it.closeRowSetIterator();

        getDBTransaction().commit();


    }


    public void insertBPO(Row poprow) {

        Row linerow = getBPOLine();

        linerow.setAttribute("SaleOrderId",
                             getPopulateValue(poprow, "HeaderId")); //DcpoNo

        linerow.setAttribute("BpoNo",
                             getPopulateValue(poprow, "CustPoNumber")); //DcpoNo


    } //end of populateLines

    public Row getBPOLine() {

        ViewObject vo = getMnjMfgRatioplanBposAllView1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        return row;
    } //end of createHeader


    public void setBPOWhereClause() {

        String buyerId = null, style = null, season = null , FinColor = null,wash=null;
        try {
            buyerId =
                    getMnjMfgRatioplanView1().getCurrentRow().getAttribute("BuyerId").toString();
            style =
                    getMnjMfgRatioplanView1().getCurrentRow().getAttribute("Style").toString();
            season =
                    getMnjMfgRatioplanView1().getCurrentRow().getAttribute("Season").toString();
            FinColor =
                    getMnjMfgRatioplanView1().getCurrentRow().getAttribute("Color").toString();
            wash =
                    getMnjMfgRatioplanView1().getCurrentRow().getAttribute("Wash").toString().toUpperCase();
            

        
        //        System.out.println("Buyer Id ---" + buyerId);
        //        System.out.println("Style name -->" + style);

        ViewObject vo = getBPOVO1();
        vo.setWhereClause("CUSTOMER_ID=" + buyerId + " AND SEASON     = '" +
                          season + "'" + " and STYLE_NAME='" + style + "'"
                          + " and upper(WASH) like'"  + wash + "'"  + " and upper(FIN_COLOR)=" + "upper(" + "'"+ FinColor + "'" +")" );
        vo.executeQuery();
        System.out.println(vo.getQuery());
            
        } catch (Exception e) {
            
            e.printStackTrace();
        }


    }


    public void copySize() {

        String Lay = null, totalPcs = null, ratioPlanFor = null, shipPriority =
            null, pattern = null;

        ViewObject hvo = getMnjMfgRatioplanView1();

        String style = hvo.getCurrentRow().getAttribute("Style").toString();
        String ratioNo =
            hvo.getCurrentRow().getAttribute("RatioplanNumber").toString();


        ViewObject vo = getMnjMfgRatioplanPlylineView1();

        Row r = vo.getCurrentRow();


        RowSetIterator it = vo.createRowSetIterator("rr");
        int cutno = 1;
        while (it.hasNext()) {

            Object val = it.next().getAttribute("CutSrNo");
            if (val != null) {
                cutno = Integer.parseInt(val.toString());
                cutno = cutno + 1;
            }
        }
        it.closeRowSetIterator();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        row.setAttribute("CutNo", ratioNo + "/" + cutno);
        row.setAttribute("CutSrNo", cutno);

        //        System.out.println("Marker No--->" + ratioNo + "/" + cutno);

        row.setAttribute("Ply", getPopulateValue(r, "Ply"));
        row.setAttribute("Totalpcs", getPopulateValue(r, "Totalpcs"));
        row.setAttribute("RpForId", getPopulateValue(r, "RpForId"));
        row.setAttribute("ShipPriority", getPopulateValue(r, "ShipPriority"));
        row.setAttribute("Pattern", getPopulateValue(r, "Pattern"));
        row.setAttribute("InseamPattern",
                         getPopulateValue(r, "InseamPattern"));

        String plyLineId = getPopulateValue(r, "PlylineId");
        String NewPlyLineId = getPopulateValue(row, "PlylineId");

        getDBTransaction().commit();

        copyMethod(plyLineId, NewPlyLineId);

        getMnjMfgRatioplanSizlineView1().executeQuery();


    }

    public void copyMethod(String plyLineId, String NewPlyLineId) {
        //        System.out.println("Ply Line Id -->" + plyLineId);
        String stmt =
            "BEGIN  mnj_mfg_marker_ratio_pkg.copy_size(:1, :2); end;";
        java.sql.CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);

        try {
            //  cs.registerOutParameter(1,OracleTypes.NUMBER); //status
            cs.setString(1, plyLineId);
            cs.setString(2, NewPlyLineId);
            cs.execute();
            cs.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /********************
     * Fill Roll No
     * *********************/

    public void popRollNo() {


        ViewObject popvo = getRollNo1();
        // popvo.executeQuery();
        //        System.out.println("Populate bpo called --->");

        RowSetIterator it = popvo.createRowSetIterator("aa");
        while (it.hasNext()) {
            Row r = it.next();
            try {


                if (r.getAttribute("RolFlag") != null &&
                    r.getAttribute("RolFlag").equals("Y"))
                    insertRoll(r);
            } catch (Exception e) {
                ;
            }
            //populateLines(r);

        }

        it.closeRowSetIterator();


    }


    public void insertRoll(Row poprow) {

        Row linerow = getRollLine();

        linerow.setAttribute("RollNo",
                             getPopulateValue(poprow, "RollNo")); //DcpoNo
        linerow.setAttribute("FabricContain",
                             getPopulateValue(poprow, "RollLength")); //DcpoNo
        linerow.setAttribute("ShrinkPrcnt",
                             getPopulateValue(poprow, "Shrinkage")); //DcpoNo
        linerow.setAttribute("Shade",
                             getPopulateValue(poprow, "Shade")); //DcpoNo

        linerow.setAttribute("FabConInch",
                             getPopulateValue(poprow, "RollLength2")); //DcpoNo

        linerow.setAttribute("CutWidth",
                             getPopulateValue(poprow, "CutWidth")); //DcpoNo

        linerow.setAttribute("ShrinkPattern",
                             getPopulateValue(poprow, "ShrinkPattern")); //DcpoNo

        linerow.setAttribute("SupplierRollNo",
                             getPopulateValue(poprow, "SupplierRollNo"));


    } //end of populateLines

    public Row getRollLine() {

        ViewObject vo = getMarkerLayPlanVO1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        return row;
    } //end of createHeader


    public Object getHeaderFieldValue(int type, String name) {

        ViewObject vo = getMnjMfgRatioplanView1();
        Row r = vo.getCurrentRow();
        Object value = null;
        value = r.getAttribute(name);
        vo = null;
        r = null;
        return value;


    }

    public void setHeaderFieldValue(String name, Object value) {

        ViewObject vo = getMnjMfgRatioplanView1();
        Row r = vo.getCurrentRow();
        r.setAttribute(name, value);


    }

    public String changeToString(Object val) {

        String value = null;
        try {
            if (val != null)
                value = val.toString();
        } catch (Exception e) {
            value = null;
        }

        return value;
    }

    public Double ChangetoDouble(Object val) {

        double value = 0.0;
        try {
            if (val != null)
                value = Double.parseDouble(val.toString());
        } catch (Exception e) {
            value = 0.0;
        }

        return value;
    }

    /************************************************************************/
    public double getPlanQty(String rationPlanID) {


        ViewObject vo = getMnjMfgRatioplanView1();
        Row r = vo.getCurrentRow();
        //        double orderQty =
        //            ChangetoDouble(getHeaderFieldValue(DOUBLE, "OrderQty"));

        /***************************************
         * Get order Qty from db function
         * *************************************************/
        Map sessionScope = ADFContext.getCurrent().getSessionScope();
        String orgId = (String)sessionScope.get("orgId");
        // orgId = "341";
        String buyerId =
            changeToString(getHeaderFieldValue(STRING, "BuyerId"));
        String style = changeToString(getHeaderFieldValue(STRING, "NewStyle"));
        String season = changeToString(getHeaderFieldValue(STRING, "NewSeason"));
        String system_id = changeToString(getHeaderFieldValue(STRING, "SystemId"));
        System.out.println("Parameters are.. "+orgId + buyerId +
                                                          style+ season+system_id );

      /*  BigDecimal ordQtyD =
            (BigDecimal)callStoredFunction(NUMBER, "mnj_mfg_marker_ratio_pkg.getOrderQty(?,?,?,?)",
                                           new Object[] { orgId, buyerId,
                                                          style, season });*/
        
        
      BigDecimal ordQtyD =
          (BigDecimal)callStoredFunction(NUMBER, "mnj_mfg_marker_ratio_pkg.XX_ODM_GETORDERQTY(?)",
                                         new Object[] { rationPlanID });
        System.out.print("order qty is:"+ordQtyD);
        double orderQty = ordQtyD.doubleValue();

        setHeaderFieldValue("OrderQty", orderQty);

        /*****************************************************
         * Get Ratio plan qty
         *
         * *********************************************/
        //        String buyerId =
        //            changeToString(getHeaderFieldValue(STRING, "BuyerId"));
        //        String style = changeToString(getHeaderFieldValue(STRING, "Style"));
        //        String season = changeToString(getHeaderFieldValue(STRING, "Season"));
/** old function where parameter was buyer style season**/
//        BigDecimal cutQtyD =
//            (BigDecimal)callStoredFunction(NUMBER, "mnj_mfg_marker_ratio_pkg.getCutQty(?,?,?)",
//                                           new Object[] { buyerId, style,
//                                                          season });
        
        
        /** new function where parameter is system id**/
        BigDecimal cutQtyD =
            (BigDecimal)callStoredFunction(NUMBER, "mnj_mfg_marker_ratio_pkg.XX_ODM_GETCUTQTY(?)",
                                           new Object[] { system_id });
        double totalCutQty = cutQtyD.doubleValue();

        double cutDeviation = totalCutQty - orderQty;
        double cutDeviationPrcnt = 0.0;
        if (orderQty > 0) {
            cutDeviationPrcnt = cutDeviation / orderQty * 100;
        }

        setHeaderFieldValue("PlanDev", cutDeviation);
        setHeaderFieldValue("PlanDevPrcnt", cutDeviationPrcnt);
        setHeaderFieldValue("CutQty", totalCutQty);

        /*****************************************************
         * Set Ratio plan qty
         * ***************************************/
        //
        //        Map sessionScope = ADFContext.getCurrent().getSessionScope();
        //        String orgId = (String)sessionScope.get("orgId");
        //  orgId = "340";
        //        String buyerId =
        //            changeToString(getHeaderFieldValue(STRING, "BuyerId"));
        //        String style = changeToString(getHeaderFieldValue(STRING, "Style"));
        //        String season = changeToString(getHeaderFieldValue(STRING, "Season"));
        //
        /** old function where parameter was buyer style season**/
//        BigDecimal ratioQtyD =
//            (BigDecimal)callStoredFunction(NUMBER, "mnj_mfg_marker_ratio_pkg.getRatioPlanQty(?,?,?,?) ",
//                                           new Object[] { orgId, buyerId,
//                                                          style, season });
        
        /** n  function where parameter is system id**/
        
        BigDecimal ratioQtyD =
            (BigDecimal)callStoredFunction(NUMBER, "mnj_mfg_marker_ratio_pkg.XX_ODM_GETRATIOPLANQTY(?) ",
                                           new Object[] { system_id});
        double raioPlaQty = ratioQtyD.doubleValue();

        setHeaderFieldValue("RatioPlanQty", raioPlaQty);


        /***********************************************************************/


        //        getDBTransaction().commit();
        //        BigDecimal planQtyD =
        //            (BigDecimal)callStoredFunction(NUMBER, "mnj_mfg_marker_ratio_pkg.getPlanQty(?)",
        //                                           new Object[] { rationPlanID });
        //
        //        double planQty = planQtyD.doubleValue();
        /*********************************************************************
         * Set Plan Deviation & Deviation percentage
         * ***************************************************************/
        double deviationPrcntVal = 0.0, deviationVal = 0.0;

        try {
            deviationVal = raioPlaQty - orderQty;
            if (deviationVal != 0 && orderQty != 0)
                deviationPrcntVal = (deviationVal / orderQty) * 100;
        } catch (Exception e) {
            deviationPrcntVal = 0.0;
        }


        r.setAttribute("Deviation", deviationVal);
        r.setAttribute("DeviatonPrcnt", deviationPrcntVal);

        // setRatioPlanQty();
        // setCutQty(orderQty);
        //        setOrderQty();

        return 0;
    }

    public void setSTNWhereClause() {

        getDBTransaction().commit();
        ViewObject vo = getSTNVO1();
        vo.executeQuery();


    }

    public void popSTN() {


        ViewObject popvo = getSTNVO1();
        // popvo.executeQuery();

        RowSetIterator it = popvo.createRowSetIterator("aa");
        while (it.hasNext()) {
            Row r = it.next();
            try {
                //                               System.out.println("STN flag -->" + r.getAttribute("StnFlag"));

                if (r.getAttribute("StnFlag") != null &&
                    r.getAttribute("StnFlag").equals("Y"))
                    insertSTN(r);
            } catch (Exception e) {
                ;
            }
            //populateLines(r);

        }

        it.closeRowSetIterator();

        //        getDBTransaction().commit();
        popvo.executeQuery();


    }


    public void insertSTN(Row poprow) {

        Row linerow = getSTNLineNew();

       // linerow.setAttribute("StnNo",
                            // getPopulateValue(poprow, "Stn"));
        
        linerow.setAttribute("BpoNo",
                             getPopulateValue(poprow, "BpoNo")); //BpoNo

        linerow.setAttribute("ItemCode",
                             getPopulateValue(poprow, "OrderedItem")); //DcpoNo

        linerow.setAttribute("ItemDescription",
                             getPopulateValue(poprow, "Description")); //DcpoNo
      linerow.setAttribute("StnQty",
                             getPopulateValue(poprow, "OrderedQty")); //DcpoNo

        linerow.setAttribute("InventoryItemId",
                             getPopulateValue(poprow, "InventoryItemId"));
        linerow.setAttribute("BpoId",
                             getPopulateValue(poprow, "BpoId"));

    } //end of populateLines

    public Row getSTNLineNew() {

        ViewObject vo = getMnjMfgRatioplanStnsAllView1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        return row;
    } //end of createHeader

    protected Object callStoredFunction(int sqlReturnType, String stmt,
                                        Object[] bindVars) {
        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st =
 getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                    
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                }
            }
        }

    }
    //This method is not used

    //    public void setRatioPlanQty() {
    //
    //        Map sessionScope = ADFContext.getCurrent().getSessionScope();
    //        String orgId = (String)sessionScope.get("orgId");
    //      //  orgId = "340";
    //        String buyerId =
    //            changeToString(getHeaderFieldValue(STRING, "BuyerId"));
    //        String style = changeToString(getHeaderFieldValue(STRING, "Style"));
    //        String season = changeToString(getHeaderFieldValue(STRING, "Season"));
    //
    //
    //        BigDecimal a =
    //            (BigDecimal)callStoredFunction(NUMBER, "mnj_mfg_marker_ratio_pkg.getRatioPlanQty(?,?,?,?)",
    //                                           new Object[] { orgId, buyerId,
    //                                                          style, season });
    //        double value = a.doubleValue();
    //
    //        setHeaderFieldValue("RatioPlanQty", value);
    //    }

    //    public void setOrderQty() {
    //
    //        Map sessionScope = ADFContext.getCurrent().getSessionScope();
    //        String orgId = (String)sessionScope.get("orgId");
    //
    //        String buyerId =
    //            changeToString(getHeaderFieldValue(STRING, "BuyerId"));
    //        String style = changeToString(getHeaderFieldValue(STRING, "Style"));
    //        String season = changeToString(getHeaderFieldValue(STRING, "Season"));
    //
    //        BigDecimal a =
    //            (BigDecimal)callStoredFunction(NUMBER, "mnj_mfg_marker_ratio_pkg.getOrderQty(?,?,?,?)",
    //                                           new Object[] { orgId, buyerId,
    //                                                          style, season });
    //        double value = a.doubleValue();
    //
    //        setHeaderFieldValue("OrderQty", value);
    //        setCutQty(value);
    //
    //
    //    }

    //    public void setCutQty(double orderQty) {
    //
    //        //        Map sessionScope = ADFContext.getCurrent().getSessionScope();
    //        //        String orgId = (String)sessionScope.get("orgId");
    //
    //        String buyerId =
    //            changeToString(getHeaderFieldValue(STRING, "BuyerId"));
    //        String style = changeToString(getHeaderFieldValue(STRING, "Style"));
    //        String season = changeToString(getHeaderFieldValue(STRING, "Season"));
    //
    //        BigDecimal a =
    //            (BigDecimal)callStoredFunction(NUMBER, "mnj_mfg_marker_ratio_pkg.getCutQty(?,?,?)",
    //                                           new Object[] { buyerId, style,
    //                                                          season });
    //        double totalCutQty = a.doubleValue();
    //
    //        double cutDeviation = totalCutQty - orderQty;
    //        double cutDeviationPrcnt = 0.0;
    //        if (orderQty > 0) {
    //            cutDeviationPrcnt = cutDeviation / orderQty * 100;
    //        }
    //
    //        setHeaderFieldValue("PlanDev", cutDeviation);
    //        setHeaderFieldValue("PlanDevPrcnt", cutDeviationPrcnt);
    //        setHeaderFieldValue("CutQty", totalCutQty);
    //
    //
    //    }

    public void selectAllLines(String flag) {


        ViewObject populatevo = getBPOVO1();
        //populatevo.executeQuery();

        //Row[] r = populatevo.getAllRowsInRange();
        RowSetIterator it = populatevo.createRowSetIterator("yy");


        while (it.hasNext()) {
            Row row = it.next();
            //            System.out.println("BPO flag------>"+flag);

            row.setAttribute("BPOFlag", flag);
            //            System.out.println("Get attiribute---->"+  row.getAttribute("BPOFlag"));


        }
        it.closeRowSetIterator();
    }


    /**
     * Container's getter for InseamSizeQualityPlanVO1.
     * @return InseamSizeQualityPlanVO1
     */
    public ViewObjectImpl getInseamSizeQualityPlanVO1() {
        return (ViewObjectImpl)findViewObject("InseamSizeQualityPlanVO1");
    }

    /**
     * Container's getter for MnjMfgRatioplanStnsAllView1.
     * @return MnjMfgRatioplanStnsAllView1
     */
    public ViewObjectImpl getMnjMfgRatioplanStnsAllView1() {
        return (ViewObjectImpl)findViewObject("MnjMfgRatioplanStnsAllView1");
    }

    /**
     * Container's getter for HeaderStnVL1.
     * @return HeaderStnVL1
     */
    public ViewLinkImpl getHeaderStnVL1() {
        return (ViewLinkImpl)findViewLink("HeaderStnVL1");
    }


    /* Total Balance Quantity */

    public void TotalBalanceQuantity() {
        getDBTransaction().commit();
        System.out.println("in TotalBalanceQuantity ....");

        //                  ViewObject vo = getMnjMfgRatioplanView1();
        //                  String ColorId = vo.getCurrentRow().getAttribute("ColorId").toString();
        //                  System.out.println("Color Id -->" + ColorId);
        //
        //                  ViewObject vo1 = getMnjMfgRatioplanPlylineView1();
        //                  String InseamPattern = vo1.getCurrentRow().getAttribute("InseamPattern").toString();
        //                  System.out.println("InseamPattern -->" + InseamPattern);
        //
        //
        //                  String PlylineId = vo1.getCurrentRow().getAttribute("PlylineId").toString();
        //                  System.out.println("PlylineId -->" + PlylineId);


        String InseamPattern = InseamPattern();
        String PlylineId = PlylineId();
        String ColorId = ColorId();

        System.out.println("Color.. " + ColorId + "  InseamPattern  " +
                           InseamPattern + "  PlylineId  " + PlylineId);

        String status = null;
        String stmt =
            "BEGIN  mnj_mfg_marker_ratio_pkg.GETBALANCEQTY(:1,:2,:3); end;";

        CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        try {
            //    cs.registerOutParameter(1, OracleTypes.VARCHAR);
            cs.setInt(1, Integer.parseInt(PlylineId));
            cs.setString(2, InseamPattern);
            cs.setString(3, ColorId);
            //     cs.setInt(2, 'A');
            cs.execute();
            //    status = cs.getString(1);
            cs.close();

        } catch (Exception e) {
            status = e.getMessage();
        }

        //         getMnjMfgRatioplanPlylineView1().executeQuery();
        //        getMnjMfgRatioplanView1().executeQuery();
        System.out.println("Color.. " + ColorId + "  InseamPattern  " +
                           InseamPattern + "  PlylineId  " + PlylineId);


    }


    public String InseamPattern() {


        ViewObject vo1 = getMnjMfgRatioplanPlylineView1();

        String InseamPattern =
            vo1.getCurrentRow().getAttribute("InseamPattern").toString();

        System.out.println("vo1.getCurrentRow().getAttribute(\"BlncInseamQty\").toString()  " +
                           vo1.getCurrentRow().getAttribute("BlncInseamQty").toString());

        //        getMnjMfgRatioplanPlylineView1().executeQuery();
        //        getMnjMfgRatioplanView1().executeQuery();

        return InseamPattern;

    }


    public String PlylineId() {


        ViewObject vo1 = getMnjMfgRatioplanPlylineView1();

        String PlylineId =
            vo1.getCurrentRow().getAttribute("PlylineId").toString();

        //      getMnjMfgRatioplanPlylineView1().executeQuery();
        //        getMnjMfgRatioplanView1().executeQuery();

        return PlylineId;

    }


    public String ColorId() {


        ViewObject vo = getMnjMfgRatioplanView1();

        String ColorId = vo.getCurrentRow().getAttribute("ColorId").toString();

        //         getMnjMfgRatioplanPlylineView1().executeQuery();
        //          getMnjMfgRatioplanView1().executeQuery();

        return ColorId;

    }


    public String getColor() {


        ViewObject vo = getMnjMfgRatioplanView1();

        String ColorId = vo.getCurrentRow().getAttribute("Color").toString();

        //         getMnjMfgRatioplanPlylineView1().executeQuery();
        //          getMnjMfgRatioplanView1().executeQuery();

        return ColorId;

    }


    /* End Total Balance Quantity */

    public String UpdateJobQuantity() {

        getDBTransaction().commit();

        System.out.println("In Update Job Quantity  ");
        ViewObject DetailVO = getMnjMfgRatioplanStnsAllView1();
        String DetailId =
            DetailVO.getCurrentRow().getAttribute("DetailId").toString();
        System.out.println("Detail ID in Update Job Quantity  " + DetailId);
        String status = null;
        String stmt =
            "BEGIN  MNJ_INTEGRATION_TO_ERP.MNJ_UPDATE_JOB_QUANTITY(:1,:2); end;";
        java.sql.CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);

        try {

            cs.setString(1, DetailId); // Detail ID
            cs.registerOutParameter(2,
                                    oracle.jdbc.OracleTypes.VARCHAR); //status

            cs.execute();
            status = cs.getString(2);
            cs.close();

        } catch (Exception e) {
            e.printStackTrace();
        }

        System.out.println("Status in UJC  " + status);

        return status;
    }


    //   --- AM Coding PARTS POP-UP ---

    public void populateBundlesParts() {

        //
        ViewObject populatevo = getpartsLov1(); // pop up view
        // populatevo.executeQuery();

        Row[] r = populatevo.getAllRowsInRange();
        System.out.println("Drop ------->" + r.length);
        for (Row row : r) {
            System.out.println("SelectionFlag Check--->" +
                               row.getAttribute("SelectionFlag"));
            if (row.getAttribute("SelectionFlag") != null &&
                row.getAttribute("SelectionFlag").equals("Y")) {
                System.out.println("Flag --->" +
                                   row.getAttribute("SelectionFlag"));
                populateLinesParts(row); /// method to populate dta
            }
        }
    }
    ////////////////////////////

    public void populateLinesParts(Row poprow) {
        System.out.println("populateLinesTest ------->");


        Row linerow = createLinesParts(); // Line Creation
        linerow.setAttribute("Parts", getPopulateValue(poprow, "Description"));

    } //end of populateLines

    public Row createLinesParts() {

        ViewObject vo =
            getBundleDetailVO1(); // in which you wants to populate daa
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        return row;
    } //end of createHeader


    //  --- End AM Coding ----


    /**
     * Container's getter for partsLov1.
     * @return partsLov1
     */
    public ViewObjectImpl getpartsLov1() {
        return (ViewObjectImpl)findViewObject("partsLov1");
    }

    public void RefreshBlocks() {
        ViewObject Sizevo = getMnjMfgRatioplanSizlineView1();
        Sizevo.executeQuery();
        ViewObject ratioVo = getMnjMfgRatioplanPlylineView1();
        ratioVo.executeQuery();
    }

    public String CalculateResource(String rationPlanID) {

        Map sessionScope = ADFContext.getCurrent().getSessionScope();
        String user = (String)sessionScope.get("userId");
        String orgId = (String)sessionScope.get("orgId");
        String respId = (String)sessionScope.get("respId");
        String respAppl = (String)sessionScope.get("respAppl");

        String status = null;
        status =
                (String)callStoredFunction(VARCHAR2, "MNJ_MFG_MARKER_RATIO_PKG.CALCULATE_RESOURCE(?)",
                                           new Object[] { rationPlanID });
        return status;
    }

    public String AssignSubInventories(String rationPlanID) {

        Map sessionScope = ADFContext.getCurrent().getSessionScope();
        String user = (String)sessionScope.get("userId");
        String orgId = (String)sessionScope.get("orgId");
        String respId = (String)sessionScope.get("respId");
        String respAppl = (String)sessionScope.get("respAppl");

        String status = null;
        status =
                (String)callStoredFunction(VARCHAR2, "MNJ_ITEM_CREATION.ASSIGN_SUBINVENTORY(?)",
                                           new Object[] { rationPlanID });
        return status;
    }


    /**
     * Container's getter for BundleDetailVO1.
     * @return BundleDetailVO1
     */
    public ViewObjectImpl getBundleDetailVO1() {
        return (ViewObjectImpl)findViewObject("BundleDetailVO1");
    }

    /**
     * Container's getter for PlyBundleDetailVO1.
     * @return PlyBundleDetailVO1
     */
    public ViewLinkImpl getPlyBundleDetailVO1() {
        return (ViewLinkImpl)findViewLink("PlyBundleDetailVO1");
    }

    /**
     * Container's getter for NewColorLOV1.
     * @return NewColorLOV1
     */
    public ViewObjectImpl getNewColorLOV1() {
        return (ViewObjectImpl)findViewObject("NewColorLOV1");
    }

    private String getwash() {
        String wash=null;
        ViewObject vo = getMnjMfgRatioplanView1();
        try{
            wash = vo.getCurrentRow().getAttribute("Wash").toString();
        }
        catch(Exception e){
            ;
        }

        

        //         getMnjMfgRatioplanPlylineView1().executeQuery();
        //          getMnjMfgRatioplanView1().executeQuery();

        return wash;
    }
}//end of class
